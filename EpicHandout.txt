import logging
import requests
import json
import os
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from bs4 import BeautifulSoup

BOT_TOKEN = '7601351287:AAFj1MtZPmXPPnpaaRry-a2BgNpUfZ6KDrw'  # üîÅ –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
USER_ID = 1878738169# üîÅ –í—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram ID

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä
def load_sent_games():
    if os.path.exists("sent_games.json"):
        with open("sent_games.json", "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä
def save_sent_games(games):
    with open("sent_games.json", "w", encoding="utf-8") as f:
        json.dump(list(games), f, ensure_ascii=False, indent=2)

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä –∏–∑ Epic Store
def get_free_epic_games():
    url = "https://store-site-backend-static.ak.epicgames.com/freeGamesPromotions"
    params = {
        "locale": "en-US",
        "country": "US",
        "allowCountries": "US"
    }
    response = requests.get(url, params=params)
    data = response.json()

    games = []
    for game in data['data']['Catalog']['searchStore']['elements']:
        if game['promotions'] and game['promotions']['promotionalOffers']:
            title = game['title']
            slug = game.get('productSlug') or game['catalogNs']['mappings'][0]['pageSlug']
            game_url = f"https://store.epicgames.com/p/{slug}"
            games.append(f"üéÆ {title}\n{game_url}")
    return games

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä –∏–∑ Steam (100% —Å–∫–∏–¥–∫–∞)
def get_steam_free_games():
    url = "https://steamdb.info/upcoming/free/"
    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, "html.parser")

    games = []
    rows = soup.select("table.table-products tbody tr")

    for row in rows:
        cols = row.find_all("td")
        if not cols:
            continue

        title_col = cols[0]
        title = title_col.text.strip()
        link = "https://steamdb.info" + title_col.find("a")["href"]

        discount = cols[2].text.strip()
        if discount == "100%":
            games.append(f"üÜì {title}\n{link}")

    return games

# –ö–æ–º–∞–Ω–¥–∞ /freegames
async def freegames_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –ò—â—É –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã –≤ Epic Games Store –∏ Steam...")
    try:
        epic_games = get_free_epic_games()
        steam_games = get_steam_free_games()
        all_games = epic_games + steam_games

        if all_games:
            message = "\n\n".join(all_games)
        else:
            message = "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä."
    except Exception as e:
        message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"
    await update.message.reply_text(message)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä–∞—Ö –≤ Epic Games Store –∏ Steam üéÆ\n–ù–∞–ø–∏—à–∏ /freegames —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –∏–≥—Ä
def check_for_new_games(app, sent_games):
    try:
        # Epic
        epic_games = get_free_epic_games()
        new_epic = [g for g in epic_games if g not in sent_games]

        # Steam
        steam_games = get_steam_free_games()
        new_steam = [g for g in steam_games if g not in sent_games]

        all_new = new_epic + new_steam

        if all_new:
            message = "üéÅ –ù–æ–≤—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã!\n\n" + "\n\n".join(all_new)
            asyncio.run(app.bot.send_message(chat_id=USER_ID, text=message))

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
            for g in all_new:
                sent_games.add(g)
            save_sent_games(sent_games)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –∏–≥—Ä: {e}")

# –ó–∞–ø—É—Å–∫
def main():
    sent_games = load_sent_games()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("freegames", freegames_handler))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = BackgroundScheduler()
    scheduler.add_job(lambda: check_for_new_games(app, sent_games), 'interval', hours=24)
    scheduler.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()